library(reticulate)
library(reticulate)
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException)--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links = pl.read_csv("links_scrape_israel.csv")
landing_page_links = scrape_links["links"])--")
py_install("polars")
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_urls = [find_urls.get_attribute("href") for find_urls in find_urls])--")
reticulate::repl_python(quiet = TRUE, input = r"--(find_urls = driver.find_elements(By.CSS_SELECTOR, "#content > div.col-12.px-3.col-lg-7.d-flex.flex-column > div.xs-mb-25.lg-mb-45.row.boxDesign.results.p-3.flex-grow-1 > ul > li:nth-child(1) > h2 > a"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(driver = Driver(uc=True))--")
reticulate::repl_python(quiet = TRUE, input = r"--(driver.get(landing_page_links[0]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links = pl.read_csv("links_scrape_israel.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(driver.get(landing_page_links[0]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(find_urls = driver.find_elements(By.CSS_SELECTOR, "#content > div.col-12.px-3.col-lg-7.d-flex.flex-column > div.xs-mb-25.lg-mb-45.row.boxDesign.results.p-3.flex-grow-1 > ul > li:nth-child(1) > h2 > a")
test_urls = [find_urls.get_attribute("href") for find_urls in find_urls])--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(test_urls))--")
reticulate::repl_python(quiet = TRUE, input = r"--(find_urls = driver.find_elements(By.CLASS_NAME, "h4")
test_urls = [find_urls.get_attribute("href") for find_urls in find_urls]
print(test_urls))--")
reticulate::repl_python(quiet = TRUE, input = r"--(find_urls = driver.find_elements(By.CSS_SELECTOR, ".ng-scope")
test_urls = [find_urls.get_attribute("href") for find_urls in find_urls]
print(test_urls))--")
reticulate::repl_python(quiet = TRUE, input = r"--(find_urls = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
test_urls = [find_urls.get_attribute("href") for find_urls in find_urls]
print(test_urls))--")
reticulate::repl_python(quiet = TRUE, input = r"--(pl_df = pl.DataFrame([test_urls], schema=["urls"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(eliminate_none = pl_df.filter((pl.col("links") != "None")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(eliminate_none = pl_df.filter((pl.col("urls") != "None")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(eliminate_none))--")
reticulate::repl_python(quiet = TRUE, input = r"--(eliminate_none.write_csv("check.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = []
for links_vec in range(1,2):
    driver = Driver(uc=True, headless=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5))--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(for links_vec in range(1,2):
    driver = Driver(uc=True, headless=True)
    driver.get(links_vec)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5))--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = []
refs_all = [get_links(Driver(uc=True, headless=True).get(link)) for link in landing_page_links[1:2]]
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(for landing_page_links in range(1,2):
    driver = Driver(uc=True, headless=True)
    driver.get(landing_page_links)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5))--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3])--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit())--")
print(refs_all)
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit())--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,20).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,30).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,30).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test = get_links(driver))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,30).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for find_urls in find_urls]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test = get_links(driver))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = WebDriverWait(driver,30).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_refs.get_attribute("href") for get_refs in get_refs]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_refs.get_attribute("href") for get_refs in get_refs]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
   
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_refs.get_attribute("href") for get_refs in get_refs]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(test = get_links(driver))--")
reticulate::repl_python(quiet = TRUE, input = r"--(test_vec = landing_page_links[0,3]
refs_all = []
def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_ref.get_attribute("href") for get_ref in get_refs]
    return get_all_refs
refs_all = []
for i in test_vec:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(5)
    driver.quit()
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(data_frame = pl.DataFrame([refs_all], schema=["urls"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(15)
    driver.quit())--")
library(reticulate)
py_install("polars")
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException)--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links = pl.read_csv("links_scrape_israel.csv")
landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_refs.get_attribute("href") for get_refs in get_refs]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=TRUE)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(15)
    driver.quit())--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_ref.get_attribute("href") for get_ref in get_refs]
    return get_all_refs)--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=TRUE)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(15)
    driver.quit())--")
reticulate::repl_python(quiet = TRUE, input = r"--(print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all = [])--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_ref.get_attribute("href") for get_ref in get_refs]
    return get_all_refs
refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=TRUE)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(15)
    driver.quit()
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    get_refs = driver.find_elements(By.CSS_SELECTOR, ".ng-binding")
    get_all_refs = [get_ref.get_attribute("href") for get_ref in get_refs]
    return get_all_refs
refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.append(refs_page)
    time.sleep(15)
    driver.quit()
print(refs_all))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl = pl.DataFrame(refs_all, schema=["links"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl = pl.DataFrame([refs_all], schema=["links"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl.head)--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl.explode(pl.col("links")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean.head())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl = pl.DataFrame([refs_all], schema=["links"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean.head())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links") != "null") &
                                        pl.col("links" != "none"))
links_pl_clean.head())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links") != null) &
                                        pl.col("links" != "none"))
links_pl_clean.head())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links").is.not_null ) &
                                        pl.col("links" != "none")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links").is.not_null) &
                                        (pl.col("links" != "none"))))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links").is.not_null) &
                                        (pl.col("links") != "none")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links").is.not_null) &
                                        (pl.col("links") != "none")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl.explode(pl.col("links")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean = links_pl_clean.filter((pl.col("links").is_not_null()) & (pl.col("links") != "none")))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean.head())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean.write_csv("links_to_scrape.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_text(driver):
    get_p = driver.find_elements(By.CSS_SELECTOR, 'p')
    get_all_p = [get_p.get_attribute('textContent') for get_p in get_p]
    return  get_all_p
def get_date(driver):
    get_date = driver.find_elements(By.CSS_SELECTOR, '#cmd_publishDate_1')
    get_all_date = [get_date.get_attribute('textContent') for get_date in get_date]
    return get_all_date
def get_subject(driver):
    get_subject = driver.find_elements(By.CSS_SELECTOR, '#content :nth-child(1)')
    get_all_subject = [get_subject.get_attribute('textContent') for get_subject in get_subject]
    return get_all_subject
def scrape_data(url):
    driver = Driver(uc=True, headless=True)
    try:
        driver.get(url)
        texts = get_text(driver)
        dates = get_date(driver)
        subject = get_subject(driver)
        time.sleep(5)
        return subject, dates, texts
    except TimeoutException as e:
        print(f"TimeoutException occurred for {url}: {e}")
        return None, None, None
def retry_scrape_data(url, max_retries=100, retry_pause=10):
    subject_data_retry = []
    date_data_retry = []
    text_data_retry = []
    retry_count = 0
    while retry_count < max_retries:
        subject, dates, texts = scrape_data(url)
        if subject is not None and dates is not None and texts is not None:
            subject_data_retry.extend(subject)
            date_data_retry.extend(dates)
            text_data_retry.extend(texts)
            break  # Break out of the retry loop if successful
        else:
            retry_count += 1
            print(f"Retrying after a pause... Attempt {retry_count} of {max_retries}")
            time.sleep(retry_pause)  # Increase the pause duration before retrying
    return subject_data_retry, date_data_retry, text_data_retry)--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl.clean[20:23])--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl_clean[20:23])--")
reticulate::repl_python(quiet = TRUE, input = r"--(get_rid_of_blank = links_pl_clean.filter((pl.col("links").str_length() > 0 )))--")
reticulate::repl_python(quiet = TRUE, input = r"--(get_rid_of_blank = links_pl_clean.filter((pl.col("links") != "│       " )))--")
reticulate::repl_python(quiet = TRUE, input = r"--(get_rid_of_blank[20:23])--")
links_in_r = reticulate::py_to_r(links_pl_clean)
links_in_r = reticulate::py_to_r("links_pl_clean")
links_raw = read_csv("links_to_scrape")
library(tidyverse)
links_raw = read_csv("links_to_scrape")
links_raw = read_csv("links_to_scrape.csv")
nchar(links_raw[22:23])
nchar(links_raw[[22:23,]])
links_check = links_raw |>
slice(22)
nchar(links_check)
.vsc.attach()
View(links_check)
View(links_raw)
links_check = links_raw |>
drop_na()
links_check = links_raw |>
drop_na() |>
distintict(links)
links_check = links_raw |>
drop_na() |>
distinct(links)
View(links_check)
tail(links_check)
tail(links_raw)
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links = pl.read_csv("links_scrape_israel.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links.tail())--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl = pl.DataFrame(refs_all, columns=["links"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(links_pl = pl.DataFrame(refs_all, schema=["links"]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(refs_all)--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    wait = WebDriverWait(driver, 10)  # Wait for up to 10 seconds
    get_refs = wait.until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_ref.get_attribute("href") for get_ref in get_refs]
    return get_all_refs
refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.extend(refs_page)
    time.sleep(15)
    driver.quit())--")
library(reticulate)
py_install("polars")
py_install("poetry")
poetry init
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException)--")
reticulate::repl_python(quiet = TRUE, input = r"--(landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links = pl.read_csv("links_scrape_israel.csv"))--")
reticulate::repl_python(quiet = TRUE, input = r"--(landing_page_links = scrape_links["links"])--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links.tail())--")
reticulate::repl_python(quiet = TRUE, input = r"--(scrape_links.glimpse())--")
reticulate::repl_python(quiet = TRUE, input = r"--(driver = Driver(uc=True)
driver.get(landing_page_links[1042]))--")
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException 
from selenium.webdriver.support.ui import WebDriverWait)--")
reticulate::repl_python(quiet = TRUE, input = r"--(def get_links(driver):
    wait = WebDriverWait(driver, 10)  # Wait for up to 10 seconds
    get_refs = wait.until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, ".ng-binding")))
    get_all_refs = [get_ref.get_attribute("href") for get_refs in get_refs]
    return get_all_refs
refs_all = []
for i in landing_page_links:
    driver = Driver(uc=True, headless=True)
    driver.get(i)
    refs_page = get_links(driver)
    refs_all.extend(refs_page)
    time.sleep(15)
    driver.quit())--")
reticulate::repl_python(quiet = TRUE, input = r"--(import random 
import time 
from selenium.webdriver.common.by import  By
from seleniumbase import Driver
import polars as pl
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException 
from selenium.webdriver.support.ui import WebDriverWait)--")
